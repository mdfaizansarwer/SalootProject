// <auto-generated />
using System;
using Date;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Data.Entities.ActionsLog", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ActionArguments")
                    .HasColumnType("text")
                    .HasColumnName("action_arguments");

                b.Property<string>("ActionName")
                    .HasMaxLength(15)
                    .HasColumnType("character varying(15)")
                    .HasColumnName("action_name");

                b.Property<byte>("ApiResultStatusCode")
                    .HasColumnType("smallint")
                    .HasColumnName("api_result_status_code");

                b.Property<string>("ClientIpAddress")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("client_ip_address");

                b.Property<string>("ControllerName")
                    .HasMaxLength(15)
                    .HasColumnType("character varying(15)")
                    .HasColumnName("controller_name");

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 468, DateTimeKind.Local).AddTicks(6732))
                    .HasColumnName("created_on");

                b.Property<string>("HttpMethod")
                    .HasMaxLength(10)
                    .HasColumnType("character varying(10)")
                    .HasColumnName("http_method");

                b.Property<bool>("IsCanceled")
                    .HasColumnType("boolean")
                    .HasColumnName("is_canceled");

                b.Property<string>("RequestPath")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("request_path");

                b.HasKey("Id")
                    .HasName("pk_actions_log");

                b.ToTable("actions_log");
            });

            modelBuilder.Entity("Data.Entities.Files.FileModel", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 469, DateTimeKind.Local).AddTicks(6472))
                    .HasColumnName("created_on");

                b.Property<string>("Description")
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)")
                    .HasColumnName("description");

                b.Property<string>("Discriminator")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("discriminator");

                b.Property<string>("Extension")
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnType("character varying(5)")
                    .HasColumnName("extension");

                b.Property<string>("FileType")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("character varying(30)")
                    .HasColumnName("file_type");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.HasKey("Id")
                    .HasName("pk_file_model");

                b.ToTable("file_model");

                b.HasDiscriminator<string>("Discriminator").HasValue("FileModel");
            });

            modelBuilder.Entity("Data.Entities.Identity.Tenant", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 469, DateTimeKind.Local).AddTicks(5029))
                    .HasColumnName("created_on");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.HasKey("Id")
                    .HasName("pk_tenant");

                b.HasIndex("Name")
                    .IsUnique()
                    .HasDatabaseName("ix_tenant_name");

                b.ToTable("tenant");
            });

            modelBuilder.Entity("Data.Entities.Logging.EmailsLog", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Body")
                    .HasColumnType("text")
                    .HasColumnName("body");

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 469, DateTimeKind.Local).AddTicks(3362))
                    .HasColumnName("created_on");

                b.Property<string>("Subject")
                    .HasColumnType("text")
                    .HasColumnName("subject");

                b.Property<string>("ToEmail")
                    .HasMaxLength(320)
                    .HasColumnType("character varying(320)")
                    .HasColumnName("to_email");

                b.Property<int?>("ToUserId")
                    .HasColumnType("integer")
                    .HasColumnName("to_user_id");

                b.HasKey("Id")
                    .HasName("pk_emails_log");

                b.HasIndex("ToUserId")
                    .HasDatabaseName("ix_emails_log_to_user_id");

                b.ToTable("emails_log");

                b.HasCheckConstraint("chk_emails_log", "(( to_user_id IS NULL AND to_email IS NOT NULL) OR (to_email IS NULL AND to_user_id IS NOT NULL))");
            });

            modelBuilder.Entity("Data.Entities.Logging.EmailsLogFileModel", b =>
            {
                b.Property<int>("EmailsLogId")
                    .HasColumnType("integer")
                    .HasColumnName("emails_log_id");

                b.Property<int>("FileModelId")
                    .HasColumnType("integer")
                    .HasColumnName("file_model_id");

                b.HasKey("EmailsLogId", "FileModelId")
                    .HasName("pk_emails_log_file_model");

                b.HasIndex("FileModelId")
                    .IsUnique()
                    .HasDatabaseName("ix_emails_log_file_model_file_model_id");

                b.ToTable("emails_log_file_model");
            });

            modelBuilder.Entity("Data.Entities.Role", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text")
                    .HasColumnName("concurrency_stamp");

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 466, DateTimeKind.Local).AddTicks(6150))
                    .HasColumnName("created_on");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("description");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnType("character varying(15)")
                    .HasColumnName("name");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("normalized_name");

                b.HasKey("Id")
                    .HasName("pk_asp_net_roles");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("role_name_index");

                b.ToTable("asp_net_roles");
            });

            modelBuilder.Entity("Data.Entities.Team", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 468, DateTimeKind.Local).AddTicks(7397))
                    .HasColumnName("created_on");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("description");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.Property<int?>("ParentId")
                    .HasColumnType("integer")
                    .HasColumnName("parent_id");

                b.Property<int?>("TenantId")
                    .HasColumnType("integer")
                    .HasColumnName("tenant_id");

                b.HasKey("Id")
                    .HasName("pk_team");

                b.HasIndex("ParentId")
                    .HasDatabaseName("ix_team_parent_id");

                b.HasIndex("TenantId")
                    .HasDatabaseName("ix_team_tenant_id");

                b.ToTable("team");

                b.HasCheckConstraint("chk_tenant", "(( parent_id IS NULL AND tenant_id IS NOT NULL) OR (tenant_id IS NULL AND parent_id IS NOT NULL))");
            });

            modelBuilder.Entity("Data.Entities.Ticket", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 468, DateTimeKind.Local).AddTicks(8449))
                    .HasColumnName("created_on");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("character varying(500)")
                    .HasColumnName("description");

                b.Property<int>("IssuerUserId")
                    .HasColumnType("integer")
                    .HasColumnName("issuer_user_id");

                b.Property<int>("TeamId")
                    .HasColumnType("integer")
                    .HasColumnName("team_id");

                b.Property<byte>("TicketStatus")
                    .HasColumnType("smallint")
                    .HasColumnName("ticket_status");

                b.Property<int>("TicketTypeId")
                    .HasColumnType("integer")
                    .HasColumnName("ticket_type_id");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("character varying(30)")
                    .HasColumnName("title");

                b.HasKey("Id")
                    .HasName("pk_ticket");

                b.HasIndex("IssuerUserId")
                    .HasDatabaseName("ix_ticket_issuer_user_id");

                b.HasIndex("TeamId")
                    .HasDatabaseName("ix_ticket_team_id");

                b.HasIndex("TicketTypeId")
                    .HasDatabaseName("ix_ticket_ticket_type_id");

                b.ToTable("ticket");
            });

            modelBuilder.Entity("Data.Entities.TicketProcess", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int?>("AssignedUserId")
                    .HasColumnType("integer")
                    .HasColumnName("assigned_user_id");

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 469, DateTimeKind.Local).AddTicks(1387))
                    .HasColumnName("created_on");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("character varying(500)")
                    .HasColumnName("description");

                b.Property<int?>("ParentTicketProcessId")
                    .HasColumnType("integer")
                    .HasColumnName("parent_ticket_process_id");

                b.Property<int>("TeamId")
                    .HasColumnType("integer")
                    .HasColumnName("team_id");

                b.Property<int>("TicketId")
                    .HasColumnType("integer")
                    .HasColumnName("ticket_id");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnType("character varying(15)")
                    .HasColumnName("title");

                b.HasKey("Id")
                    .HasName("pk_ticket_process");

                b.HasIndex("AssignedUserId")
                    .HasDatabaseName("ix_ticket_process_assigned_user_id");

                b.HasIndex("ParentTicketProcessId")
                    .HasDatabaseName("ix_ticket_process_parent_ticket_process_id");

                b.HasIndex("TeamId")
                    .HasDatabaseName("ix_ticket_process_team_id");

                b.HasIndex("TicketId")
                    .HasDatabaseName("ix_ticket_process_ticket_id");

                b.ToTable("ticket_process");
            });

            modelBuilder.Entity("Data.Entities.TicketType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 469, DateTimeKind.Local).AddTicks(2909))
                    .HasColumnName("created_on");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("character varying(30)")
                    .HasColumnName("type");

                b.HasKey("Id")
                    .HasName("pk_ticket_type");

                b.ToTable("ticket_type");
            });

            modelBuilder.Entity("Data.Entities.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer")
                    .HasColumnName("access_failed_count");

                b.Property<DateTime>("Birthdate")
                    .HasColumnType("date")
                    .HasColumnName("birthdate");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text")
                    .HasColumnName("concurrency_stamp");

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 468, DateTimeKind.Local).AddTicks(4159))
                    .HasColumnName("created_on");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(320)
                    .HasColumnType("character varying(320)")
                    .HasColumnName("email");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean")
                    .HasColumnName("email_confirmed");

                b.Property<string>("Firstname")
                    .IsRequired()
                    .HasMaxLength(35)
                    .HasColumnType("character varying(35)")
                    .HasColumnName("firstname");

                b.Property<byte>("Gender")
                    .HasColumnType("smallint")
                    .HasColumnName("gender");

                b.Property<bool>("IsActive")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(true)
                    .HasColumnName("is_active");

                b.Property<DateTime?>("LastLoginDate")
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("last_login_date");

                b.Property<string>("Lastname")
                    .IsRequired()
                    .HasMaxLength(35)
                    .HasColumnType("character varying(35)")
                    .HasColumnName("lastname");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean")
                    .HasColumnName("lockout_enabled");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("lockout_end");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("normalized_email");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("normalized_user_name");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text")
                    .HasColumnName("password_hash");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text")
                    .HasColumnName("phone_number");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean")
                    .HasColumnName("phone_number_confirmed");

                b.Property<int?>("ProfilePictureId")
                    .HasColumnType("integer")
                    .HasColumnName("profile_picture_id");

                b.Property<string>("RefreshToken")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("refresh_token");

                b.Property<DateTime?>("RefreshTokenExpirationTime")
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("refresh_token_expiration_time");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text")
                    .HasColumnName("security_stamp");

                b.Property<int>("TeamId")
                    .HasColumnType("integer")
                    .HasColumnName("team_id");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean")
                    .HasColumnName("two_factor_enabled");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnType("character varying(15)")
                    .HasColumnName("user_name");

                b.HasKey("Id")
                    .HasName("pk_asp_net_users");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("email_index");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("user_name_index");

                b.HasIndex("ProfilePictureId")
                    .IsUnique()
                    .HasDatabaseName("ix_asp_net_users_profile_picture_id");

                b.HasIndex("TeamId")
                    .HasDatabaseName("ix_asp_net_users_team_id");

                b.ToTable("asp_net_users");
            });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.Property<int>("RoleId")
                    .HasColumnType("integer")
                    .HasColumnName("role_id");

                b.Property<DateTime>("CreatedOn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp without time zone")
                    .HasDefaultValue(new DateTime(2021, 6, 14, 0, 57, 27, 468, DateTimeKind.Local).AddTicks(5688))
                    .HasColumnName("created_on");

                b.HasKey("UserId", "RoleId")
                    .HasName("pk_asp_net_user_roles");

                b.HasIndex("RoleId")
                    .HasDatabaseName("ix_asp_net_user_roles_role_id");

                b.ToTable("asp_net_user_roles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text")
                    .HasColumnName("claim_type");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text")
                    .HasColumnName("claim_value");

                b.Property<int>("RoleId")
                    .HasColumnType("integer")
                    .HasColumnName("role_id");

                b.HasKey("Id")
                    .HasName("pk_asp_net_role_claims");

                b.HasIndex("RoleId")
                    .HasDatabaseName("ix_asp_net_role_claims_role_id");

                b.ToTable("asp_net_role_claims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text")
                    .HasColumnName("claim_type");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text")
                    .HasColumnName("claim_value");

                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("pk_asp_net_user_claims");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_asp_net_user_claims_user_id");

                b.ToTable("asp_net_user_claims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text")
                    .HasColumnName("login_provider");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text")
                    .HasColumnName("provider_key");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text")
                    .HasColumnName("provider_display_name");

                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.HasKey("LoginProvider", "ProviderKey")
                    .HasName("pk_asp_net_user_logins");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_asp_net_user_logins_user_id");

                b.ToTable("asp_net_user_logins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text")
                    .HasColumnName("login_provider");

                b.Property<string>("Name")
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.Property<string>("Value")
                    .HasColumnType("text")
                    .HasColumnName("value");

                b.HasKey("UserId", "LoginProvider", "Name")
                    .HasName("pk_asp_net_user_tokens");

                b.ToTable("asp_net_user_tokens");
            });

            modelBuilder.Entity("Data.Entities.Files.FileOnDatabase", b =>
            {
                b.HasBaseType("Data.Entities.Files.FileModel");

                b.Property<byte[]>("Data")
                    .HasColumnType("bytea")
                    .HasColumnName("data");

                b.ToTable("file_model");

                b.HasDiscriminator().HasValue("FileOnDatabase");
            });

            modelBuilder.Entity("Data.Entities.Files.FileOnFileSystem", b =>
            {
                b.HasBaseType("Data.Entities.Files.FileModel");

                b.Property<string>("FilePath")
                    .HasMaxLength(500)
                    .HasColumnType("character varying(500)")
                    .HasColumnName("file_path");

                b.ToTable("file_model");

                b.HasDiscriminator().HasValue("FileOnFileSystem");
            });

            modelBuilder.Entity("Data.Entities.Logging.EmailsLog", b =>
            {
                b.HasOne("Data.Entities.User", "ToUser")
                    .WithMany("EmailsLogs")
                    .HasForeignKey("ToUserId")
                    .HasConstraintName("fk_emails_log_asp_net_users_to_user_id");

                b.Navigation("ToUser");
            });

            modelBuilder.Entity("Data.Entities.Logging.EmailsLogFileModel", b =>
            {
                b.HasOne("Data.Entities.Logging.EmailsLog", "EmailsLog")
                    .WithMany("EmailsLogFileModels")
                    .HasForeignKey("EmailsLogId")
                    .HasConstraintName("fk_emails_log_file_model_emails_log_emails_log_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Data.Entities.Files.FileModel", "FileModel")
                    .WithMany("EmailsLogFileModels")
                    .HasForeignKey("FileModelId")
                    .HasConstraintName("fk_emails_log_file_model_file_model_file_model_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("EmailsLog");

                b.Navigation("FileModel");
            });

            modelBuilder.Entity("Data.Entities.Team", b =>
            {
                b.HasOne("Data.Entities.Team", "ParentTeam")
                    .WithMany("ChildTeams")
                    .HasForeignKey("ParentId")
                    .HasConstraintName("fk_team_team_parent_id");

                b.HasOne("Data.Entities.Identity.Tenant", "Tenant")
                    .WithMany("Teams")
                    .HasForeignKey("TenantId")
                    .HasConstraintName("fk_team_tenant_tenant_id");

                b.Navigation("ParentTeam");

                b.Navigation("Tenant");
            });

            modelBuilder.Entity("Data.Entities.Ticket", b =>
            {
                b.HasOne("Data.Entities.User", "User")
                    .WithMany("Tickets")
                    .HasForeignKey("IssuerUserId")
                    .HasConstraintName("fk_ticket_asp_net_users_issuer_user_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Data.Entities.Team", "Team")
                    .WithMany("Tickets")
                    .HasForeignKey("TeamId")
                    .HasConstraintName("fk_ticket_team_team_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Data.Entities.TicketType", "TicketType")
                    .WithMany("Tickets")
                    .HasForeignKey("TicketTypeId")
                    .HasConstraintName("fk_ticket_ticket_type_ticket_type_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("Team");

                b.Navigation("TicketType");

                b.Navigation("User");
            });

            modelBuilder.Entity("Data.Entities.TicketProcess", b =>
            {
                b.HasOne("Data.Entities.User", "User")
                    .WithMany("TicketProcesses")
                    .HasForeignKey("AssignedUserId")
                    .HasConstraintName("fk_ticket_process_asp_net_users_assigned_user_id");

                b.HasOne("Data.Entities.TicketProcess", "ParentTicketProcess")
                    .WithMany("ChildTicketProcesses")
                    .HasForeignKey("ParentTicketProcessId")
                    .HasConstraintName("fk_ticket_process_ticket_process_parent_ticket_process_id");

                b.HasOne("Data.Entities.Team", "Team")
                    .WithMany("TicketProcesses")
                    .HasForeignKey("TeamId")
                    .HasConstraintName("fk_ticket_process_team_team_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Data.Entities.Ticket", "Ticket")
                    .WithMany("TicketProcesses")
                    .HasForeignKey("TicketId")
                    .HasConstraintName("fk_ticket_process_ticket_ticket_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("ParentTicketProcess");

                b.Navigation("Team");

                b.Navigation("Ticket");

                b.Navigation("User");
            });

            modelBuilder.Entity("Data.Entities.User", b =>
            {
                b.HasOne("Data.Entities.Files.FileModel", "ProfilePicture")
                    .WithOne("User")
                    .HasForeignKey("Data.Entities.User", "ProfilePictureId")
                    .HasConstraintName("fk_asp_net_users_file_model_profile_picture_id");

                b.HasOne("Data.Entities.Team", "Team")
                    .WithMany("Users")
                    .HasForeignKey("TeamId")
                    .HasConstraintName("fk_asp_net_users_team_team_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("ProfilePicture");

                b.Navigation("Team");
            });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
            {
                b.HasOne("Data.Entities.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Data.Entities.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("Role");

                b.Navigation("User");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.HasOne("Data.Entities.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.HasOne("Data.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("Data.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("Data.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();
            });

            modelBuilder.Entity("Data.Entities.Files.FileModel", b =>
            {
                b.Navigation("EmailsLogFileModels");

                b.Navigation("User");
            });

            modelBuilder.Entity("Data.Entities.Identity.Tenant", b =>
            {
                b.Navigation("Teams");
            });

            modelBuilder.Entity("Data.Entities.Logging.EmailsLog", b =>
            {
                b.Navigation("EmailsLogFileModels");
            });

            modelBuilder.Entity("Data.Entities.Role", b =>
            {
                b.Navigation("UserRoles");
            });

            modelBuilder.Entity("Data.Entities.Team", b =>
            {
                b.Navigation("ChildTeams");

                b.Navigation("TicketProcesses");

                b.Navigation("Tickets");

                b.Navigation("Users");
            });

            modelBuilder.Entity("Data.Entities.Ticket", b =>
            {
                b.Navigation("TicketProcesses");
            });

            modelBuilder.Entity("Data.Entities.TicketProcess", b =>
            {
                b.Navigation("ChildTicketProcesses");
            });

            modelBuilder.Entity("Data.Entities.TicketType", b =>
            {
                b.Navigation("Tickets");
            });

            modelBuilder.Entity("Data.Entities.User", b =>
            {
                b.Navigation("EmailsLogs");

                b.Navigation("TicketProcesses");

                b.Navigation("Tickets");

                b.Navigation("UserRoles");
            });
#pragma warning restore 612, 618
        }
    }
}
